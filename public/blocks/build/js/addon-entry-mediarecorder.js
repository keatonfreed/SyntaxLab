(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-mediarecorder"],{

/***/ "./node_modules/css-loader/index.js!./src/addons/addons/mediarecorder/style.css":
/*!*****************************************************************************!*\
  !*** ./node_modules/css-loader!./src/addons/addons/mediarecorder/style.css ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".mediaRecorderPopup {\n  box-sizing: border-box;\n  width: 700px;\n  max-height: min(800px, 80vh);\n  max-width: 85%;\n  margin-top: 12vh;\n  overflow-y: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.mediaRecorderPopupContent {\n  padding: 1.5rem 2.25rem;\n}\n\n.mediaRecorderPopup p {\n  font-size: 1rem;\n  margin: 0.5rem auto;\n}\n\n.mediaRecorderPopup p :last-child {\n  margin-left: 1rem;\n}\n\n.mediaRecorderPopup[dir=\"rtl\"] p :last-child {\n  margin-left: 0;\n  margin-right: 1rem;\n}\n\np.mediaRecorderPopupOption {\n  display: flex;\n  align-items: center;\n}\n\n.mediaRecorderPopupOption input[type=\"checkbox\"] {\n  height: 1.5rem;\n}\n\n#recordOptionSecondsInput,\n#recordOptionDelayInput {\n  width: 6rem;\n}\n\n.mediaRecorderPopupButtons {\n  margin-top: 1.5rem;\n}\n\n.mediaRecorderPopupButtons button {\n  margin-left: 0.5rem;\n}\n\n.mediaRecorderPopupButtons button:nth-of-type(1) {\n  color: black;\n}\n", ""]);

// exports


/***/ }),

/***/ "./src/addons/addons/mediarecorder/_runtime_entry.js":
/*!***********************************************************!*\
  !*** ./src/addons/addons/mediarecorder/_runtime_entry.js ***!
  \***********************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/mediarecorder/userscript.js");
/* harmony import */ var _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! css-loader!./style.css */ "./node_modules/css-loader/index.js!./src/addons/addons/mediarecorder/style.css");
/* harmony import */ var _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_style_css__WEBPACK_IMPORTED_MODULE_1__);
/* generated by pull.js */


var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  "style.css": _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1___default.a
};

/***/ }),

/***/ "./src/addons/addons/mediarecorder/userscript.js":
/*!*******************************************************!*\
  !*** ./src/addons/addons/mediarecorder/userscript.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libraries_common_cs_download_blob_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../libraries/common/cs/download-blob.js */ "./src/addons/libraries/common/cs/download-blob.js");
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }

/* harmony default export */ __webpack_exports__["default"] = (/*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref) {
    var addon, console, msg, recordElem, isRecording, isWaitingForFlag, waitingForFlagFunc, abortController, stopSignFunc, recordBuffer, recorder, timeout, mimeType, fileExtension, _loop;
    return _regeneratorRuntime().wrap(function _callee3$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          addon = _ref.addon, console = _ref.console, msg = _ref.msg;
          isRecording = false;
          isWaitingForFlag = false;
          waitingForFlagFunc = null;
          abortController = null;
          stopSignFunc = null;
          recordBuffer = [];
          mimeType = [
          // Chrome and Firefox only support encoding as webm
          // VP9 is preferred as its playback is better supported across platforms
          "video/webm; codecs=vp9",
          // Firefox only supports encoding VP8
          "video/webm",
          // Safari only supports encoding H264 as mp4
          "video/mp4"].find(function (i) {
            return MediaRecorder.isTypeSupported(i);
          });
          fileExtension = mimeType.split(";")[0].split("/")[1];
          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
            var elem, getOptions, disposeRecorder, stopRecording, startRecording;
            return _regeneratorRuntime().wrap(function _loop$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return addon.tab.waitForElement('div[class*="menu-bar_file-group"] > div:last-child:not(.sa-record)', {
                    markAsSeen: true,
                    reduxEvents: ["scratch-gui/mode/SET_PLAYER", "fontsLoaded/SET_FONTS_LOADED", "scratch-gui/locales/SELECT_LOCALE"]
                  });
                case 2:
                  elem = _context3.sent;
                  getOptions = function getOptions() {
                    var _addon$tab$createModa = addon.tab.createModal(msg("option-title"), {
                        isOpen: true,
                        useEditorClasses: true
                      }),
                      backdrop = _addon$tab$createModa.backdrop,
                      container = _addon$tab$createModa.container,
                      content = _addon$tab$createModa.content,
                      closeButton = _addon$tab$createModa.closeButton,
                      remove = _addon$tab$createModa.remove;
                    container.classList.add("mediaRecorderPopup");
                    content.classList.add("mediaRecorderPopupContent");
                    content.appendChild(Object.assign(document.createElement("p"), {
                      textContent: msg("record-description", {
                        extension: ".".concat(fileExtension)
                      }),
                      className: "recordOptionDescription"
                    }));

                    // Seconds
                    var recordOptionSeconds = document.createElement("p");
                    var recordOptionSecondsInput = Object.assign(document.createElement("input"), {
                      type: "number",
                      min: 1,
                      max: 600,
                      defaultValue: 30,
                      id: "recordOptionSecondsInput",
                      className: addon.tab.scratchClass("prompt_variable-name-text-input")
                    });
                    var recordOptionSecondsLabel = Object.assign(document.createElement("label"), {
                      htmlFor: "recordOptionSecondsInput",
                      textContent: msg("record-duration")
                    });
                    recordOptionSeconds.appendChild(recordOptionSecondsLabel);
                    recordOptionSeconds.appendChild(recordOptionSecondsInput);
                    content.appendChild(recordOptionSeconds);

                    // Delay
                    var recordOptionDelay = document.createElement("p");
                    var recordOptionDelayInput = Object.assign(document.createElement("input"), {
                      type: "number",
                      min: 0,
                      max: 600,
                      defaultValue: 0,
                      id: "recordOptionDelayInput",
                      className: addon.tab.scratchClass("prompt_variable-name-text-input")
                    });
                    var recordOptionDelayLabel = Object.assign(document.createElement("label"), {
                      htmlFor: "recordOptionDelayInput",
                      textContent: msg("start-delay")
                    });
                    recordOptionDelay.appendChild(recordOptionDelayLabel);
                    recordOptionDelay.appendChild(recordOptionDelayInput);
                    content.appendChild(recordOptionDelay);

                    // Audio
                    var recordOptionAudio = Object.assign(document.createElement("p"), {
                      className: "mediaRecorderPopupOption"
                    });
                    var recordOptionAudioInput = Object.assign(document.createElement("input"), {
                      type: "checkbox",
                      defaultChecked: true,
                      id: "recordOptionAudioInput"
                    });
                    var recordOptionAudioLabel = Object.assign(document.createElement("label"), {
                      htmlFor: "recordOptionAudioInput",
                      textContent: msg("record-audio"),
                      title: msg("record-audio-description")
                    });
                    recordOptionAudio.appendChild(recordOptionAudioInput);
                    recordOptionAudio.appendChild(recordOptionAudioLabel);
                    content.appendChild(recordOptionAudio);

                    // Mic
                    var recordOptionMic = Object.assign(document.createElement("p"), {
                      className: "mediaRecorderPopupOption"
                    });
                    var recordOptionMicInput = Object.assign(document.createElement("input"), {
                      type: "checkbox",
                      defaultChecked: false,
                      id: "recordOptionMicInput"
                    });
                    var recordOptionMicLabel = Object.assign(document.createElement("label"), {
                      htmlFor: "recordOptionMicInput",
                      textContent: msg("record-mic")
                    });
                    recordOptionMic.appendChild(recordOptionMicInput);
                    recordOptionMic.appendChild(recordOptionMicLabel);
                    content.appendChild(recordOptionMic);

                    // Green flag
                    var recordOptionFlag = Object.assign(document.createElement("p"), {
                      className: "mediaRecorderPopupOption"
                    });
                    var recordOptionFlagInput = Object.assign(document.createElement("input"), {
                      type: "checkbox",
                      defaultChecked: true,
                      id: "recordOptionFlagInput"
                    });
                    var recordOptionFlagLabel = Object.assign(document.createElement("label"), {
                      htmlFor: "recordOptionFlagInput",
                      textContent: msg("record-after-flag")
                    });
                    recordOptionFlag.appendChild(recordOptionFlagInput);
                    recordOptionFlag.appendChild(recordOptionFlagLabel);
                    content.appendChild(recordOptionFlag);

                    // Stop sign
                    var recordOptionStop = Object.assign(document.createElement("p"), {
                      className: "mediaRecorderPopupOption"
                    });
                    var recordOptionStopInput = Object.assign(document.createElement("input"), {
                      type: "checkbox",
                      defaultChecked: true,
                      id: "recordOptionStopInput"
                    });
                    var recordOptionStopLabel = Object.assign(document.createElement("label"), {
                      htmlFor: "recordOptionStopInput",
                      textContent: msg("record-until-stop")
                    });
                    recordOptionFlagInput.addEventListener("change", function () {
                      var disabled = recordOptionStopInput.disabled = !recordOptionFlagInput.checked;
                      if (disabled) {
                        recordOptionStopLabel.title = msg("record-until-stop-disabled", {
                          afterFlagOption: msg("record-after-flag")
                        });
                      }
                    });
                    recordOptionStop.appendChild(recordOptionStopInput);
                    recordOptionStop.appendChild(recordOptionStopLabel);
                    content.appendChild(recordOptionStop);
                    var resolvePromise = null;
                    var optionPromise = new Promise(function (resolve) {
                      resolvePromise = resolve;
                    });
                    var handleOptionClose = null;
                    backdrop.addEventListener("click", function () {
                      return handleOptionClose(null);
                    });
                    closeButton.addEventListener("click", function () {
                      return handleOptionClose(null);
                    });
                    handleOptionClose = function handleOptionClose(value) {
                      resolvePromise(value);
                      remove();
                    };
                    var buttonRow = Object.assign(document.createElement("div"), {
                      className: addon.tab.scratchClass("prompt_button-row", {
                        others: "mediaRecorderPopupButtons"
                      })
                    });
                    var cancelButton = Object.assign(document.createElement("button"), {
                      textContent: msg("cancel")
                    });
                    cancelButton.addEventListener("click", function () {
                      return handleOptionClose(null);
                    }, {
                      once: true
                    });
                    buttonRow.appendChild(cancelButton);
                    var startButton = Object.assign(document.createElement("button"), {
                      textContent: msg("start"),
                      className: addon.tab.scratchClass("prompt_ok-button")
                    });
                    startButton.addEventListener("click", function () {
                      return handleOptionClose({
                        secs: Number(recordOptionSecondsInput.value),
                        delay: Number(recordOptionDelayInput.value),
                        audioEnabled: recordOptionAudioInput.checked,
                        micEnabled: recordOptionMicInput.checked,
                        waitUntilFlag: recordOptionFlagInput.checked,
                        useStopSign: !recordOptionStopInput.disabled && recordOptionStopInput.checked
                      });
                    }, {
                      once: true
                    });
                    buttonRow.appendChild(startButton);
                    content.appendChild(buttonRow);
                    return optionPromise;
                  };
                  disposeRecorder = function disposeRecorder() {
                    isRecording = false;
                    recordElem.textContent = msg("record");
                    recordElem.title = "";
                    recorder = null;
                    recordBuffer = [];
                    clearTimeout(timeout);
                    timeout = 0;
                    if (stopSignFunc) {
                      addon.tab.traps.vm.runtime.off("PROJECT_STOP_ALL", stopSignFunc);
                      stopSignFunc = null;
                    }
                  };
                  stopRecording = function stopRecording(force) {
                    if (isWaitingForFlag) {
                      addon.tab.traps.vm.runtime.off("PROJECT_START", waitingForFlagFunc);
                      isWaitingForFlag = false;
                      waitingForFlagFunc = null;
                      abortController.abort();
                      abortController = null;
                      disposeRecorder();
                      return;
                    }
                    if (!isRecording || !recorder || recorder.state === "inactive") return;
                    if (force) {
                      disposeRecorder();
                    } else {
                      recorder.onstop = function () {
                        var _addon$tab$redux$stat, _addon$tab$redux$stat2, _addon$tab$redux$stat3;
                        var blob = new Blob(recordBuffer, {
                          type: mimeType
                        });
                        Object(_libraries_common_cs_download_blob_js__WEBPACK_IMPORTED_MODULE_0__["default"])("".concat(((_addon$tab$redux$stat = addon.tab.redux.state) === null || _addon$tab$redux$stat === void 0 ? void 0 : (_addon$tab$redux$stat2 = _addon$tab$redux$stat.preview) === null || _addon$tab$redux$stat2 === void 0 ? void 0 : (_addon$tab$redux$stat3 = _addon$tab$redux$stat2.projectInfo) === null || _addon$tab$redux$stat3 === void 0 ? void 0 : _addon$tab$redux$stat3.title) || "video", ".").concat(fileExtension), blob);
                        disposeRecorder();
                      };
                      recorder.stop();
                    }
                  };
                  startRecording = /*#__PURE__*/function () {
                    var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(opts) {
                      var secs, vm, micStream, stream, videoStream, ctx, dest, mediaStreamDestination, audioSource, micSource, delay, roundedDelay, index;
                      return _regeneratorRuntime().wrap(function _callee$(_context) {
                        while (1) switch (_context.prev = _context.next) {
                          case 0:
                            // Timer
                            secs = Math.min(600, Math.max(1, opts.secs)); // Initialize MediaRecorder
                            recordBuffer = [];
                            isRecording = true;
                            vm = addon.tab.traps.vm;
                            if (!opts.micEnabled) {
                              _context.next = 16;
                              break;
                            }
                            _context.prev = 5;
                            _context.next = 8;
                            return navigator.mediaDevices.getUserMedia({
                              audio: true
                            });
                          case 8:
                            micStream = _context.sent;
                            _context.next = 16;
                            break;
                          case 11:
                            _context.prev = 11;
                            _context.t0 = _context["catch"](5);
                            if (!(_context.t0.name !== "NotAllowedError" && _context.t0.name !== "NotFoundError")) {
                              _context.next = 15;
                              break;
                            }
                            throw _context.t0;
                          case 15:
                            opts.micEnabled = false;
                          case 16:
                            if (!opts.waitUntilFlag) {
                              _context.next = 30;
                              break;
                            }
                            isWaitingForFlag = true;
                            Object.assign(recordElem, {
                              textContent: msg("click-flag"),
                              title: msg("click-flag-description")
                            });
                            abortController = new AbortController();
                            _context.prev = 20;
                            _context.next = 23;
                            return Promise.race([new Promise(function (resolve) {
                              waitingForFlagFunc = function waitingForFlagFunc() {
                                return resolve();
                              };
                              vm.runtime.once("PROJECT_START", waitingForFlagFunc);
                            }), new Promise(function (_, reject) {
                              abortController.signal.addEventListener("abort", function () {
                                return reject("aborted");
                              }, {
                                once: true
                              });
                            })]);
                          case 23:
                            _context.next = 30;
                            break;
                          case 25:
                            _context.prev = 25;
                            _context.t1 = _context["catch"](20);
                            if (!(_context.t1.message === "aborted")) {
                              _context.next = 29;
                              break;
                            }
                            return _context.abrupt("return");
                          case 29:
                            throw _context.t1;
                          case 30:
                            isWaitingForFlag = false;
                            waitingForFlagFunc = abortController = null;
                            stream = new MediaStream();
                            videoStream = vm.runtime.renderer.canvas.captureStream();
                            stream.addTrack(videoStream.getVideoTracks()[0]);
                            ctx = new AudioContext();
                            dest = ctx.createMediaStreamDestination();
                            if (opts.audioEnabled) {
                              mediaStreamDestination = vm.runtime.audioEngine.audioContext.createMediaStreamDestination();
                              vm.runtime.audioEngine.inputNode.connect(mediaStreamDestination);
                              audioSource = ctx.createMediaStreamSource(mediaStreamDestination.stream);
                              audioSource.connect(dest);
                            }
                            if (opts.micEnabled) {
                              micSource = ctx.createMediaStreamSource(micStream);
                              micSource.connect(dest);
                            }
                            if (opts.audioEnabled || opts.micEnabled) {
                              stream.addTrack(dest.stream.getAudioTracks()[0]);
                            }
                            recorder = new MediaRecorder(stream, {
                              mimeType: mimeType
                            });
                            recorder.ondataavailable = function (e) {
                              recordBuffer.push(e.data);
                            };
                            recorder.onerror = function (e) {
                              console.warn("Recorder error:", e.error);
                              stopRecording(true);
                            };
                            timeout = setTimeout(function () {
                              return stopRecording(false);
                            }, secs * 1000);
                            if (opts.useStopSign) {
                              stopSignFunc = function stopSignFunc() {
                                return stopRecording();
                              };
                              vm.runtime.once("PROJECT_STOP_ALL", stopSignFunc);
                            }

                            // Delay
                            delay = opts.delay || 0;
                            roundedDelay = Math.floor(delay);
                            index = 0;
                          case 48:
                            if (!(index < roundedDelay)) {
                              _context.next = 55;
                              break;
                            }
                            recordElem.textContent = msg("starting-in", {
                              secs: roundedDelay - index
                            });
                            _context.next = 52;
                            return new Promise(function (resolve) {
                              return setTimeout(resolve, 975);
                            });
                          case 52:
                            index++;
                            _context.next = 48;
                            break;
                          case 55:
                            setTimeout(function () {
                              recordElem.textContent = msg("stop");
                              recorder.start(1000);
                            }, (delay - roundedDelay) * 1000);
                          case 56:
                          case "end":
                            return _context.stop();
                        }
                      }, _callee, null, [[5, 11], [20, 25]]);
                    }));
                    return function startRecording(_x2) {
                      return _ref3.apply(this, arguments);
                    };
                  }();
                  if (!recordElem) {
                    recordElem = Object.assign(document.createElement("div"), {
                      className: "sa-record " + elem.className,
                      textContent: msg("record")
                    });
                    recordElem.addEventListener("click", /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                      var opts;
                      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                        while (1) switch (_context2.prev = _context2.next) {
                          case 0:
                            if (!isRecording) {
                              _context2.next = 4;
                              break;
                            }
                            stopRecording();
                            _context2.next = 11;
                            break;
                          case 4:
                            _context2.next = 6;
                            return getOptions();
                          case 6:
                            opts = _context2.sent;
                            if (opts) {
                              _context2.next = 10;
                              break;
                            }
                            console.log("Canceled");
                            return _context2.abrupt("return");
                          case 10:
                            startRecording(opts);
                          case 11:
                          case "end":
                            return _context2.stop();
                        }
                      }, _callee2);
                    })));
                  }
                  elem.parentElement.appendChild(recordElem);
                case 9:
                case "end":
                  return _context3.stop();
              }
            }, _loop);
          });
        case 10:
          if (false) {}
          return _context4.delegateYield(_loop(), "t0", 12);
        case 12:
          _context4.next = 10;
          break;
        case 14:
        case "end":
          return _context4.stop();
      }
    }, _callee3);
  }));
  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}());

/***/ }),

/***/ "./src/addons/libraries/common/cs/download-blob.js":
/*!*********************************************************!*\
  !*** ./src/addons/libraries/common/cs/download-blob.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
// From https://github.com/scratchfoundation/scratch-gui/blob/develop/src/lib/download-blob.js
/* harmony default export */ __webpack_exports__["default"] = (function (filename, blob) {
  var downloadLink = document.createElement("a");
  document.body.appendChild(downloadLink);

  // Use special ms version if available to get it working on Edge.
  if (navigator.msSaveOrOpenBlob) {
    navigator.msSaveOrOpenBlob(blob, filename);
    return;
  }
  if ("download" in HTMLAnchorElement.prototype) {
    var url = window.URL.createObjectURL(blob);
    downloadLink.href = url;
    downloadLink.download = filename;
    downloadLink.type = blob.type;
    downloadLink.click();
    // remove the link after a timeout to prevent a crash on iOS 13 Safari
    window.setTimeout(function () {
      document.body.removeChild(downloadLink);
      window.URL.revokeObjectURL(url);
    }, 1000);
  } else {
    // iOS 12 Safari, open a new page and set href to data-uri
    var popup = window.open("", "_blank");
    var reader = new FileReader();
    reader.onloadend = function () {
      popup.location.href = reader.result;
      popup = null;
    };
    reader.readAsDataURL(blob);
  }
});

/***/ })

}]);
//# sourceMappingURL=addon-entry-mediarecorder.js.map