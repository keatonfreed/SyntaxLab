(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-data-category-tweaks-v2"],{

/***/ "./src/addons/addons/data-category-tweaks-v2/_runtime_entry.js":
/*!*********************************************************************!*\
  !*** ./src/addons/addons/data-category-tweaks-v2/_runtime_entry.js ***!
  \*********************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/data-category-tweaks-v2/userscript.js");
/* generated by pull.js */

var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"]
};

/***/ }),

/***/ "./src/addons/addons/data-category-tweaks-v2/userscript.js":
/*!*****************************************************************!*\
  !*** ./src/addons/addons/data-category-tweaks-v2/userscript.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});
function _ref2() {
  _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
    var addon, console, msg, safeMsg, ScratchBlocks, SMALL_GAP, BIG_GAP, vm, hasSeparateListCategory, separateVariablesByType, separateLocalVariables, moveReportersDown, DataCategory, variableCategory, listCategory, variableCategoryCallback, listCategoryCallback, oldShow, originalGetBlocksXML, dynamicEnableOrDisable;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          addon = _ref.addon, console = _ref.console, msg = _ref.msg, safeMsg = _ref.safeMsg;
          _context.next = 3;
          return addon.tab.traps.getBlockly();
        case 3:
          ScratchBlocks = _context.sent;
          SMALL_GAP = 8;
          BIG_GAP = 24;
          vm = addon.tab.traps.vm; // Used in setting change handler. Updated in getBlocksXML.
          // (Yes this is weird but it's how it was originally and I'm too scared to change it)
          hasSeparateListCategory = false;
          separateVariablesByType = function separateVariablesByType(toolboxXML) {
            var listButtonIndex = toolboxXML.findIndex(function (i) {
              return i.getAttribute("callbackkey") === "CREATE_LIST" || i.getAttribute("type") === "data_addtolist";
            });
            return {
              variables: toolboxXML.slice(0, listButtonIndex),
              lists: toolboxXML.slice(listButtonIndex, toolboxXML.length)
            };
          };
          separateLocalVariables = function separateLocalVariables(workspace, toolboxXML) {
            var _separateVariablesByT = separateVariablesByType(toolboxXML),
              variables = _separateVariablesByT.variables,
              lists = _separateVariablesByT.lists;
            var makeLabel = function makeLabel(l10n) {
              var label = document.createElement("label");
              label.setAttribute("text", msg(l10n));
              return label;
            };
            var fixGaps = function fixGaps(variables) {
              if (variables.length > 0) {
                for (var i = 0; i < variables.length - 1; i++) {
                  variables[i].setAttribute("gap", SMALL_GAP);
                }
                variables[i].setAttribute("gap", BIG_GAP);
              }
            };
            var separateVariablesByScope = function separateVariablesByScope(xml) {
              var before = [];
              var global = [];
              var local = [];
              var after = [];
              var _iterator = _createForOfIteratorHelper(xml),
                _step;
              try {
                for (_iterator.s(); !(_step = _iterator.n()).done;) {
                  var blockXML = _step.value;
                  if (blockXML.hasAttribute("id")) {
                    var id = blockXML.getAttribute("id");
                    var variable = workspace.getVariableById(id);
                    if (!variable || !variable.isLocal) {
                      global.push(blockXML);
                    } else {
                      local.push(blockXML);
                    }
                  } else if (global.length || local.length) {
                    after.push(blockXML);
                  } else {
                    before.push(blockXML);
                  }
                }
              } catch (err) {
                _iterator.e(err);
              } finally {
                _iterator.f();
              }
              var result = before;
              if (global.length) {
                result.push(makeLabel("for-all-sprites"));
                fixGaps(global);
                result.push.apply(result, global);
              }
              if (local.length) {
                result.push(makeLabel("for-this-sprite-only"));
                fixGaps(local);
                result.push.apply(result, local);
              }
              return result.concat(after);
            };
            return separateVariablesByScope(variables).concat(separateVariablesByScope(lists));
          };
          moveReportersDown = function moveReportersDown(toolboxXML) {
            var _separateVariablesByT2 = separateVariablesByType(toolboxXML),
              variables = _separateVariablesByT2.variables,
              lists = _separateVariablesByT2.lists;
            var moveReportersToEnd = function moveReportersToEnd(xml) {
              var reporters = [];
              var everythingElse = [];
              var _iterator2 = _createForOfIteratorHelper(xml),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var blockXML = _step2.value;
                  if (blockXML.hasAttribute("id") || blockXML.tagName === "BUTTON") {
                    // Round reporters and the create variable button
                    reporters.push(blockXML);
                  } else {
                    // Everything else like "change variable by 1"
                    everythingElse.push(blockXML);
                  }
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
              if (everythingElse.length) {
                everythingElse[everythingElse.length - 1].setAttribute("gap", BIG_GAP);
              }
              return everythingElse.concat(reporters);
            };
            return moveReportersToEnd(variables).concat(moveReportersToEnd(lists));
          };
          DataCategory = ScratchBlocks.DataCategory;
          variableCategoryCallback = function variableCategoryCallback(workspace) {
            var result = DataCategory(workspace);
            if (!addon.self.disabled && addon.settings.get("moveReportersDown")) {
              result = moveReportersDown(result);
            }
            if (!addon.self.disabled && addon.settings.get("separateLocalVariables")) {
              result = separateLocalVariables(workspace, result);
            }
            if (addon.self.disabled || !hasSeparateListCategory) {
              return result;
            }
            var _separateVariablesByT3 = separateVariablesByType(result),
              variables = _separateVariablesByT3.variables,
              lists = _separateVariablesByT3.lists;
            variableCategory = variables;
            listCategory = lists;
            return variableCategory;
          };
          listCategoryCallback = function listCategoryCallback() {
            // Computed in variable category callback, which should be called before this method.
            return listCategory;
          }; // Each time a new workspace is made, these callbacks are reset, so re-register whenever a flyout is shown.
          // https://github.com/scratchfoundation/scratch-blocks/blob/61f02e4cac0f963abd93013842fe536ef24a0e98/core/flyout_base.js#L469
          oldShow = ScratchBlocks.Flyout.prototype.show;
          ScratchBlocks.Flyout.prototype.show = function (xmlList) {
            this.workspace_.registerToolboxCategoryCallback("VARIABLE", variableCategoryCallback);
            this.workspace_.registerToolboxCategoryCallback("LIST", listCategoryCallback);
            return oldShow.call(this, xmlList);
          };

          // Use Scratch's extension category mechanism to replace the data category with our own.
          // https://github.com/scratchfoundation/scratch-gui/blob/ddd2fa06f2afa140a46ec03be91796ded861e65c/src/containers/blocks.jsx#L344
          // https://github.com/scratchfoundation/scratch-gui/blob/2ceab00370ad7bd8ecdf5c490e70fd02152b3e2a/src/lib/make-toolbox-xml.js#L763
          // https://github.com/scratchfoundation/scratch-vm/blob/a0c11d6d8664a4f2d55632e70630d09ec6e9ae28/src/engine/runtime.js#L1381
          originalGetBlocksXML = vm.runtime.getBlocksXML;
          vm.runtime.getBlocksXML = function (target) {
            var result = originalGetBlocksXML.call(this, target);
            hasSeparateListCategory = addon.settings.get("separateListCategory");
            if (!addon.self.disabled && hasSeparateListCategory) {
              result.push({
                id: "data",
                xml: "\n        <category\n          name=\"%{BKY_CATEGORY_VARIABLES}\"\n          id=\"variables\"\n          colour=\"".concat(ScratchBlocks.Colours.data.primary, "\"\n          secondaryColour=\"").concat(ScratchBlocks.Colours.data.tertiary, "\"\n          custom=\"VARIABLE\">\n        </category>\n        <category\n          name=\"").concat(safeMsg("list-category"), "\"\n          id=\"lists\"\n          colour=\"").concat(ScratchBlocks.Colours.data_lists.primary, "\"\n          secondaryColour=\"").concat(ScratchBlocks.Colours.data_lists.tertiary, "\"\n          custom=\"LIST\">\n        </category>")
              });
              result.map = function (callback) {
                // Prevent Scratch from trying to change the color of the added category in high contrast mode.
                // https://github.com/scratchfoundation/scratch-gui/blob/44eb578/src/containers/blocks.jsx#L358-L361
                // https://github.com/scratchfoundation/scratch-gui/blob/44eb578/src/lib/themes/blockHelpers.js#L18-L53
                return Array.prototype.map.call(result, function (extension) {
                  if (extension.id === "data") return extension;else return callback(extension);
                });
              };
            }
            return result;
          };

          // If editingTarget is set, the editor has already rendered and we have to tell it to rerender.
          if (vm.editingTarget) {
            vm.emitWorkspaceUpdate();
          }
          addon.settings.addEventListener("change", function (e) {
            // When the separate list category option changes, we need to do a workspace update.
            // For all other options, just refresh the toolbox.
            // Always doing both of these in response to a settings change causes many issues.
            if (addon.settings.get("separateListCategory") !== hasSeparateListCategory) {
              if (vm.editingTarget) {
                vm.emitWorkspaceUpdate();
              }
            } else {
              var workspace = Blockly.getMainWorkspace();
              if (workspace) {
                workspace.refreshToolboxSelection_();
              }
            }
          });
          dynamicEnableOrDisable = function dynamicEnableOrDisable() {
            // Enabling/disabling is similar to changing settings.
            // If separate list category is enabled, a workspace update is needed.
            // If any other setting is enabled, refresh the toolbox.
            if (addon.settings.get("separateListCategory")) {
              if (vm.editingTarget) {
                vm.emitWorkspaceUpdate();
              }
            }
            if (addon.settings.get("separateLocalVariables") || addon.settings.get("moveReportersDown")) {
              var workspace = Blockly.getMainWorkspace();
              if (workspace) {
                workspace.refreshToolboxSelection_();
              }
            }
          };
          addon.self.addEventListener("disabled", function () {
            dynamicEnableOrDisable();
          });
          addon.self.addEventListener("reenabled", function () {
            dynamicEnableOrDisable();
          });
        case 23:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-data-category-tweaks-v2.js.map