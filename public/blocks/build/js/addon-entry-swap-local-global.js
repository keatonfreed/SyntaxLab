(window["webpackJsonpGUI"] = window["webpackJsonpGUI"] || []).push([["addon-entry-swap-local-global"],{

/***/ "./node_modules/css-loader/index.js!./src/addons/addons/swap-local-global/style.css":
/*!*********************************************************************************!*\
  !*** ./node_modules/css-loader!./src/addons/addons/swap-local-global/style.css ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".sa-swap-local-global-hint {\n  padding-bottom: 1rem;\n}\n.sa-swap-local-global-stage {\n  /* resolves scratch class style conflict */\n  display: block;\n}\n", ""]);

// exports


/***/ }),

/***/ "./src/addons/addons/swap-local-global/_runtime_entry.js":
/*!***************************************************************!*\
  !*** ./src/addons/addons/swap-local-global/_runtime_entry.js ***!
  \***************************************************************/
/*! exports provided: resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resources", function() { return resources; });
/* harmony import */ var _userscript_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userscript.js */ "./src/addons/addons/swap-local-global/userscript.js");
/* harmony import */ var _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! css-loader!./style.css */ "./node_modules/css-loader/index.js!./src/addons/addons/swap-local-global/style.css");
/* harmony import */ var _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_css_loader_style_css__WEBPACK_IMPORTED_MODULE_1__);
/* generated by pull.js */


var resources = {
  "userscript.js": _userscript_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  "style.css": _css_loader_style_css__WEBPACK_IMPORTED_MODULE_1___default.a
};

/***/ }),

/***/ "./src/addons/addons/swap-local-global/userscript.js":
/*!***********************************************************!*\
  !*** ./src/addons/addons/swap-local-global/userscript.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(r, e) { var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t["return"] || t["return"](); } finally { if (u) throw o; } } }; }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* harmony default export */ __webpack_exports__["default"] = (function (_x) {
  return _ref2.apply(this, arguments);
});
function _ref2() {
  _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(_ref) {
    var addon, msg, console, ScratchBlocks, vm, getTargetName, getTargetsThatUseVariable, getTargetsWithLocalVariableNamed, getVmVariable, isStageSelected, deleteVariableWithoutDeletingBlocks, syncBlockVariableNameWithActualVariableName, _undoRedoPreserveStateCallback, finishUndoRedoState, customUndoVarDelete, customUndoVarCreate, flushBlocklyEventQueue, beginPreservingState, convertVariable, canUserUseCloudVariables, addMoreOptionsToPrompt, originalRenameVariable;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          addon = _ref.addon, msg = _ref.msg, console = _ref.console;
          _context.next = 3;
          return addon.tab.traps.getBlockly();
        case 3:
          ScratchBlocks = _context.sent;
          vm = addon.tab.traps.vm;
          getTargetName = function getTargetName(target) {
            if (target.isStage) {
              // Stage always has an internal name of "Stage", but we want a translatable name
              return ScratchBlocks.ScratchMsgs.translate("SENSING_OF_STAGE", "Stage");
            }
            return target.getName();
          };
          getTargetsThatUseVariable = function getTargetsThatUseVariable(id) {
            return vm.runtime.targets.filter(function (target) {
              return target.isOriginal;
            }).filter(function (target) {
              return Object.values(target.blocks._blocks).find(function (block) {
                return block.fields.LIST && block.fields.LIST.id === id || block.fields.VARIABLE && block.fields.VARIABLE.id === id;
              });
            });
          }; // https://github.com/scratchfoundation/scratch-vm/blob/7c6f1e44fb0a9b0d0279225cd4c62fbe59b6af54/src/engine/blocks.js#L388-L394
          getTargetsWithLocalVariableNamed = function getTargetsWithLocalVariableNamed(name, type) {
            return vm.runtime.targets.filter(function (target) {
              return target.isOriginal && target.lookupVariableByNameAndType(name, type, true);
            });
          };
          getVmVariable = function getVmVariable(id) {
            return vm.editingTarget.lookupVariableById(id);
          };
          isStageSelected = function isStageSelected() {
            return vm.editingTarget.isStage;
          };
          deleteVariableWithoutDeletingBlocks = function deleteVariableWithoutDeletingBlocks(workspace, variable) {
            // variable can be an ID or an actual Blockly variable object
            if (typeof variable === "string") {
              variable = workspace.getVariableById(variable);
            }
            workspace.variableMap_.deleteVariable(variable);
          };
          syncBlockVariableNameWithActualVariableName = function syncBlockVariableNameWithActualVariableName(workspace, id) {
            var variable = workspace.getVariableById(id);
            var _iterator = _createForOfIteratorHelper(workspace.getAllBlocks()),
              _step;
            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var block = _step.value;
                block.updateVarName(variable);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          };
          _undoRedoPreserveStateCallback = null;
          finishUndoRedoState = function finishUndoRedoState() {
            if (_undoRedoPreserveStateCallback) {
              _undoRedoPreserveStateCallback();
              _undoRedoPreserveStateCallback = null;
            }
          }; // https://github.com/scratchfoundation/scratch-blocks/blob/0d6012df1e18e66d82c1247f1f6d772a719982a7/core/variable_events.js#L194
          customUndoVarDelete = function customUndoVarDelete(forward) {
            var workspace = this.getEventWorkspace_();
            if (forward) {
              _undoRedoPreserveStateCallback = beginPreservingState(workspace, this.varId);
              deleteVariableWithoutDeletingBlocks(workspace, this.varId);
            } else {
              workspace.createVariable(this.varName, this.varType, this.varId, this.isLocal, this.isCloud);
              finishUndoRedoState();
            }
          }; // https://github.com/scratchfoundation/scratch-blocks/blob/0d6012df1e18e66d82c1247f1f6d772a719982a7/core/variable_events.js#L131
          customUndoVarCreate = function customUndoVarCreate(forward) {
            var workspace = this.getEventWorkspace_();
            if (forward) {
              workspace.createVariable(this.varName, this.varType, this.varId, this.isLocal, this.isCloud);
              finishUndoRedoState();
            } else {
              _undoRedoPreserveStateCallback = beginPreservingState(workspace, this.varId);
              deleteVariableWithoutDeletingBlocks(workspace, this.varId);
            }
          };
          flushBlocklyEventQueue = function flushBlocklyEventQueue() {
            return ScratchBlocks.Events.fireNow_();
          };
          beginPreservingState = function beginPreservingState(workspace, id) {
            // oldMonitorState is an instance of https://github.com/scratchfoundation/scratch-vm/blob/develop/src/engine/monitor-record.js or undefined
            var oldMonitorState = vm.runtime._monitorState.get(id);
            var oldVmVariable = getVmVariable(id);
            return function () {
              flushBlocklyEventQueue();
              var newVmVariable = getVmVariable(id);
              if (newVmVariable) {
                newVmVariable.value = oldVmVariable.value;
              }

              // Update the variable monitor (state is maintained separately)
              if (oldMonitorState) {
                if (oldMonitorState.visible) {
                  vm.runtime.monitorBlocks.changeBlock({
                    id: id,
                    element: "checkbox",
                    value: true
                  });
                }
                var isLocal = !vm.runtime.getTargetForStage().variables[id];
                var newMonitorState = oldMonitorState;
                if (isLocal) {
                  var target = vm.editingTarget;
                  newMonitorState = newMonitorState.set("targetId", target.id);
                  newMonitorState = newMonitorState.set("spriteName", target.getName());
                } else {
                  newMonitorState = newMonitorState.set("targetId", null);
                  newMonitorState = newMonitorState.set("spriteName", null);
                }
                if (newVmVariable.name !== oldVmVariable.name) {
                  var monitorBlocks = vm.runtime.monitorBlocks;
                  var block = monitorBlocks.getBlock(id);
                  if (block) {
                    newMonitorState = newMonitorState.set("params", monitorBlocks._getBlockParams(block));
                  }
                }
                vm.runtime.requestAddMonitor(newMonitorState);
              }
              if (newVmVariable.name !== oldVmVariable.name) {
                syncBlockVariableNameWithActualVariableName(workspace, id);
              }
            };
          };
          convertVariable = function convertVariable(oldBlocklyVariable, newLocal, newCloud) {
            var CLOUD_PREFIX = "☁ ";
            var name = oldBlocklyVariable.name;
            var id = oldBlocklyVariable.getId();
            var type = oldBlocklyVariable.type;
            var isLocal = oldBlocklyVariable.isLocal;
            var isCloud = oldBlocklyVariable.isCloud;
            if (isLocal === newLocal && isCloud === newCloud) {
              return;
            }

            // Cloud variables must always be global
            if (newCloud && newLocal) {
              alert(msg("cant-convert-cloud"));
              return;
            }
            var editingTarget = vm.editingTarget;
            if (isLocal !== newLocal) {
              if (newLocal) {
                // Stage cannot have local variables
                if (isStageSelected()) {
                  alert(msg("cant-convert-stage"));
                  return;
                }
                // Variables used by unfocused sprites cannot be made local
                // That includes cases where the variable is used by multiple sprites and where it's only used by an unfocused sprite
                var targets = getTargetsThatUseVariable(id);
                if (!targets.every(function (i) {
                  return i === editingTarget;
                })) {
                  if (targets.length > 1) {
                    alert(msg("cant-convert-to-local", {
                      sprites: targets.map(getTargetName).join(", ")
                    }));
                  } else {
                    alert(msg("cant-convert-used-elsewhere", {
                      sprite: getTargetName(targets[0])
                    }));
                  }
                  return;
                }
              } else {
                // Global variables must not conflict with any local variables
                var _targets = getTargetsWithLocalVariableNamed(name, type).filter(function (target) {
                  return target !== editingTarget;
                });
                if (_targets.length > 0) {
                  alert(msg("cant-convert-conflict", {
                    sprites: _targets.map(getTargetName).join(", ")
                  }));
                  return;
                }
              }
            }
            var newName = name;
            if (isCloud !== newCloud) {
              if (newCloud) {
                newName = CLOUD_PREFIX + name;
              } else if (name.startsWith(CLOUD_PREFIX)) {
                newName = name.replace(CLOUD_PREFIX, "");
              }
            }
            var workspace = oldBlocklyVariable.workspace;
            var finishPreservingState = beginPreservingState(workspace, id);
            ScratchBlocks.Events.setGroup(true);
            try {
              deleteVariableWithoutDeletingBlocks(workspace, oldBlocklyVariable);
              workspace.createVariable(newName, type, id, newLocal, newCloud);
            } finally {
              ScratchBlocks.Events.setGroup(false);
            }

            // 2 items will be added to the queue: a variable create and delete
            // We override their undo handlers to make undo/redo work properly
            flushBlocklyEventQueue();
            var stack = workspace.undoStack_;
            var createEvent = stack[stack.length - 1];
            var deleteEvent = stack[stack.length - 2];
            if (createEvent instanceof ScratchBlocks.Events.VarCreate && deleteEvent instanceof ScratchBlocks.Events.VarDelete) {
              createEvent.run = customUndoVarCreate;
              deleteEvent.run = customUndoVarDelete;
            }
            finishPreservingState();
          };
          canUserUseCloudVariables = function canUserUseCloudVariables() {
            var blocksWrapper = document.querySelector('[class^="gui_blocks-wrapper_"]');
            var internalNode = blocksWrapper[addon.tab.traps.getInternalKey(blocksWrapper)];
            while (true) {
              var _internalNode$stateNo, _internalNode$stateNo2;
              if (!internalNode) {
                return false;
              }
              var canUseCloud = (_internalNode$stateNo = internalNode.stateNode) === null || _internalNode$stateNo === void 0 ? void 0 : (_internalNode$stateNo2 = _internalNode$stateNo.props) === null || _internalNode$stateNo2 === void 0 ? void 0 : _internalNode$stateNo2.canUseCloud;
              if (typeof canUseCloud === "boolean") {
                return canUseCloud;
              }
              internalNode = internalNode.child;
            }
          };
          addMoreOptionsToPrompt = function addMoreOptionsToPrompt(variable) {
            if (addon.self.disabled) {
              return;
            }
            var promptBody = document.querySelector('[class^="prompt_body_"]');
            if (!promptBody) {
              return;
            }
            var headerTitle = promptBody.parentElement.querySelector('[class^="modal_header-item_"]');
            if (headerTitle) {
              if (variable.type === "") {
                headerTitle.textContent = msg("edit-variable-header");
              } else {
                headerTitle.textContent = msg("edit-list-header");
              }
            }
            var root = document.createElement("div");
            addon.tab.displayNoneWhileDisabled(root);
            var createLabeledInput = function createLabeledInput(text, value) {
              var outer = document.createElement("label");
              var input = document.createElement("input");
              if (value === "checkbox") {
                input.type = "checkbox";
              } else {
                input.name = "variableScopeOption";
                input.type = "radio";
                input.value = value;
              }
              outer.appendChild(input);
              var label = document.createElement("span");
              label.textContent = text;
              outer.appendChild(label);
              return {
                outer: outer,
                label: label,
                input: input
              };
            };
            var promptDisabledClass = addon.tab.scratchClass("prompt_disabled-label");
            var noLocalsInStageSection = document.createElement("div");
            noLocalsInStageSection.className = addon.tab.scratchClass("prompt_info-message", "prompt_cloud-option", {
              others: "sa-swap-local-global-stage"
            });
            noLocalsInStageSection.appendChild(Object.assign(document.createElement("span"), {
              textContent: addon.tab.scratchMessage("gui.gui.variablePromptAllSpritesMessage")
            }));
            var scopeSection = document.createElement("div");
            scopeSection.className = addon.tab.scratchClass("prompt_options-row", "prompt_cloud-option");
            var forAllSprites = createLabeledInput(addon.tab.scratchMessage("gui.gui.variableScopeOptionAllSprites"), "global");
            var forThisSpriteOnly = createLabeledInput(addon.tab.scratchMessage("gui.gui.variableScopeOptionSpriteOnly"), "local");
            forAllSprites.input.checked = !variable.isLocal;
            forThisSpriteOnly.input.checked = variable.isLocal;
            scopeSection.appendChild(forAllSprites.outer);
            scopeSection.appendChild(forThisSpriteOnly.outer);
            var cloudSection = document.createElement("div");
            cloudSection.className = addon.tab.scratchClass("prompt_cloud-option");
            var cloudCheckbox = createLabeledInput(addon.tab.scratchMessage("gui.gui.cloudVariableOption"), "checkbox");
            cloudCheckbox.input.checked = variable.isCloud;
            if (!vm.runtime.canAddCloudVariable() && !variable.isCloud) {
              cloudCheckbox.input.disabled = true;
              cloudSection.classList.add(promptDisabledClass);
            }
            cloudSection.appendChild(cloudCheckbox.outer);
            var updateDisabledInputs = function updateDisabledInputs() {
              var thisSpriteOnlyDisabled = cloudCheckbox.input.checked;
              forThisSpriteOnly.input.disabled = thisSpriteOnlyDisabled;
              forThisSpriteOnly.label.classList.toggle(promptDisabledClass, thisSpriteOnlyDisabled);
              if (thisSpriteOnlyDisabled) {
                forAllSprites.input.click();
              }
            };
            cloudCheckbox.input.addEventListener("change", updateDisabledInputs);
            updateDisabledInputs();
            var isAnythingConfigurable = false;
            if (isStageSelected()) {
              root.appendChild(noLocalsInStageSection);
            } else {
              isAnythingConfigurable = true;
              root.appendChild(scopeSection);
            }
            if (variable.type === "" && canUserUseCloudVariables()) {
              isAnythingConfigurable = true;
              root.appendChild(cloudSection);
            }
            if (isAnythingConfigurable) {
              root.prepend(Object.assign(document.createElement("div"), {
                textContent: msg("edit"),
                className: "sa-swap-local-global-hint"
              }));
            }
            promptBody.insertBefore(root, promptBody.lastChild);
            return {
              isLocal: function isLocal() {
                return forThisSpriteOnly.input.checked;
              },
              isCloud: function isCloud() {
                return cloudCheckbox.input.checked;
              }
            };
          }; // https://github.com/scratchfoundation/scratch-blocks/blob/c5014f61e2e538e99601a9e0cb39e339e44c3910/core/variables.js#L470
          originalRenameVariable = ScratchBlocks.Variables.renameVariable;
          ScratchBlocks.Variables.renameVariable = function (workspace, variable, opt_callback) {
            var ret = originalRenameVariable.call(this, workspace, variable, function () {
              if (opt_callback) {
                opt_callback.apply(void 0, arguments);
              }
              if (!addon.self.disabled && prompt) {
                convertVariable(variable, prompt.isLocal(), prompt.isCloud());
              }
            });
            var prompt = addMoreOptionsToPrompt(variable);
            return ret;
          };
          addon.tab.createBlockContextMenu(function (items, block) {
            if (!addon.self.disabled && (block.getCategory() === "data" || block.getCategory() === "data-lists")) {
              var variable = block.workspace.getVariableById(block.getVars()[0]);
              if (variable) {
                if (items.length > 0) {
                  if (items[0].text === ScratchBlocks.ScratchMsgs.translate("RENAME_VARIABLE")) {
                    items[0].text = msg("edit-variable-option");
                  } else if (items[0].text === ScratchBlocks.ScratchMsgs.translate("RENAME_LIST")) {
                    items[0].text = msg("edit-list-option");
                  }
                }
                items.push({
                  enabled: true,
                  separator: true,
                  text: msg("to-".concat(variable.isLocal ? "global" : "local")),
                  callback: function callback() {
                    return convertVariable(variable, !variable.isLocal, variable.isCloud);
                  }
                });
              }
            }
            return items;
          }, {
            flyout: true,
            blocks: true
          });
        case 24:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _ref2.apply(this, arguments);
}

/***/ })

}]);
//# sourceMappingURL=addon-entry-swap-local-global.js.map